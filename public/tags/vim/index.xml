<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>literal thoughts</title>
    <link>http://blog.nix.is/tags/vim/index.xml</link>
    <description>Recent content on literal thoughts</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <atom:link href="http://blog.nix.is/tags/vim/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>perl6.vim gets more love</title>
      <link>http://blog.nix.is/perl6-vim-gets-more-love</link>
      <pubDate>Sun, 01 Mar 2015 20:30:00 +0000</pubDate>
      
      <guid>http://blog.nix.is/perl6-vim-gets-more-love</guid>
      <description>&lt;p&gt;tl;dr: Some tuits came my way, so Vim&amp;rsquo;s syntax highlighting of Perl 6 is
much better and faster now. Try it!
&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&amp;lt;timotimo&amp;gt; hoelzro: i just skimmed the perl6 vim syntax and &amp;hellip; oh crap&lt;/p&gt;

&lt;p&gt;&amp;lt;timotimo&amp;gt; there&amp;rsquo;s just no way i could even make a dent in that thing&lt;/p&gt;

&lt;p&gt;* psch usually turns off highlighting in vim because it&amp;rsquo;s so slow :/&lt;/p&gt;

&lt;p&gt;&amp;lt;sorear&amp;gt; perl 6 is not really syntax-highlightable&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;So&amp;hellip;yeah, perl6.vim is a bit of a beast.&lt;/p&gt;

&lt;h3 id=&#34;recent-history-of-perl6-vim&#34;&gt;Recent history of perl6.vim&lt;/h3&gt;

&lt;p&gt;Sometime in 2008 or so, I got interested in Perl 6, and I really wanted it
to be nicely higlighted in my editor (Vim) as I learned. As it turned out,
there was already a Vim syntax file for it, in the
&lt;a href=&#34;http://svn.openfoundry.org/pugs/util/perl6.vim&#34;&gt;Pugs SVN&lt;/a&gt; repository. This
was mostly the work of &lt;code&gt;lpalmer++&lt;/code&gt; and &lt;code&gt;moritz++&lt;/code&gt;. It worked decently, but
as I learned about more nooks and crannies of Perl 6 (there sure are enough
of them) I started finding the limitations of the highlighting to be
frustrating.&lt;/p&gt;

&lt;p&gt;I wanted to make it better, so I started learning all about Vim&amp;rsquo;s
regexes and syntax highlighting support. I began hacking on &lt;code&gt;perl6.vim&lt;/code&gt;,
and soon enough it grew to be the largest Vim syntax file in existence.
Perl 6 is hard enough to parse already. Having to do so with Vim patterns,
doubly so. I made some progress but eventually the performance of the
highlighting suffered as it grew to support ever more complicated syntax.&lt;/p&gt;

&lt;p&gt;In 2009, &lt;code&gt;alester++&lt;/code&gt; created the vim-perl repository on Github to consolidat
Perl support for Vim. &lt;code&gt;perl6.vim&lt;/code&gt; gained a new home shortly thereafter
when he imported it from the Pugs repo. Around the same I discovered
&lt;a href=&#34;https://metacpan.org/pod/Text::VimColor&#34;&gt;Text::VimColor&lt;/a&gt; and used it to
create a test harness for the syntax highlighting of &lt;code&gt;perl.vim&lt;/code&gt; and
&lt;code&gt;perl6.vim&lt;/code&gt;. I fixed a few Perl 5 highlighting bugs and added some tests
for them, but I never got around to doing the same for Perl 6.&lt;/p&gt;

&lt;p&gt;Since then, a few contributors (&lt;code&gt;hoelzro++&lt;/code&gt; et al) have continued to fix
bugs in &lt;code&gt;perl6.vim&lt;/code&gt;. In the meantime, Perl 6 has also evolved, and some
of the assumptions &lt;code&gt;perl6.vim&lt;/code&gt; has made are no longer valid.&lt;/p&gt;

&lt;p&gt;A few weeks ago I went to FOSDEM 2015, where Larry announced that this
Christmas would be The One™. That rekindled my interest in &lt;code&gt;perl6.vim&lt;/code&gt;,
and I&amp;rsquo;d like to share with you some of the progress I&amp;rsquo;ve made with it.&lt;/p&gt;

&lt;h3 id=&#34;performance&#34;&gt;Performance&lt;/h3&gt;

&lt;p&gt;Vim 7.4 ships with a &lt;a href=&#34;http://vimhelp.appspot.com/syntax.txt.html#%3Asyntime&#34;&gt;profiler&lt;/a&gt;
for its syntax highlighting. I used it to identify a lot of inefficient
patterns in the syntax file. I tried to reduce the use of zero-width
assertions (lookarounds) and to make more use of
&lt;a href=&#34;http://vimhelp.appspot.com/syntax.txt.html#%3Asyn-nextgroup&#34;&gt;&lt;code&gt;nextgroup&lt;/code&gt;&lt;/a&gt;
instead when possible. I also optimized many patterns to reject matches as
soon as possible. As a result, Vim now needs to attempt much fewer matches,
and the ones it does attempt are taking less time to do their work.
Editing most Perl 6 files feels pretty snappy now, even
&lt;a href=&#34;https://github.com/perl6/std/blob/master/STD.pm6&#34;&gt;STD.pm6&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&#34;identifiers&#34;&gt;Identifiers&lt;/h3&gt;

&lt;p&gt;In &lt;code&gt;ftplugin/perl6.vim&lt;/code&gt;, I added the apostrophe and high-bit alphabetical
characters (&lt;code&gt;æóð...&lt;/code&gt;) to the list of characters vim recognizes in keywords
(&lt;a href=&#34;http://vimhelp.appspot.com/options.txt.html#%27iskeyword%27&#34;&gt;&lt;code&gt;iskeyword&lt;/code&gt;&lt;/a&gt;)
This allows all valid Perl 6 identifiers to be used in Vim commands that
depend on matching keywords.&lt;/p&gt;

&lt;p&gt;I also cleaned up the highlighting of Perl 6 idenfifiers, in particular
adding support for the high-bit characters and better support for dashes,
so these are now highlighted correctly in sub/package/variable/etc names.&lt;/p&gt;

&lt;h3 id=&#34;multiline-comments&#34;&gt;Multiline comments&lt;/h3&gt;

&lt;p&gt;These have been updated to recognize the new &lt;code&gt;#&amp;#x60;&lt;/code&gt; prefix,
and to be allowed at the beginning of a line. Previously, multiline comments
with stacked delimiters (&lt;code&gt;««&lt;/code&gt;, &lt;code&gt;&amp;lt;&amp;lt;&lt;/code&gt;, &lt;code&gt;&amp;lt;&amp;lt;&amp;lt;&lt;/code&gt;, etc) were not highlighted by
default. Some profiling showed that doing so does not have a noticable
performance impact, so I changed it to always highlight them.&lt;/p&gt;

&lt;h3 id=&#34;heredocs&#34;&gt;Heredocs&lt;/h3&gt;

&lt;p&gt;I added highlighting of heredocs with &lt;code&gt;qto&lt;/code&gt;, &lt;code&gt;qqto&lt;/code&gt;, &lt;code&gt;q:to&lt;/code&gt;, &lt;code&gt;qq:to&lt;/code&gt;,
&lt;code&gt;q:heredoc&lt;/code&gt;, and &lt;code&gt;qq:heredoc&lt;/code&gt;, for most commonly used delimiters.&lt;/p&gt;

&lt;h3 id=&#34;setting-functions-and-methods&#34;&gt;Setting functions and methods&lt;/h3&gt;

&lt;blockquote&gt;
&lt;p&gt;* TimToady wishes all these highlighters wouldn&amp;rsquo;t treat setting functions and methods as reserved words; they&amp;rsquo;re just functions and methods`&lt;/p&gt;

&lt;p&gt;&amp;lt;moritz&amp;gt; TimToady: agreed&lt;/p&gt;

&lt;p&gt;* flussence wishes perl6.vim didn&amp;rsquo;t highlight Test.pm functions as reserved words either&amp;hellip;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;By popular request, I removed highlighting of builtin functions and
methods. This makes sense since there&amp;rsquo;s no way to avoid highlighting
user-defined methods that happen to share the name of a builtin one.&lt;/p&gt;

&lt;h3 id=&#34;metaoperators&#34;&gt;Metaoperators&lt;/h3&gt;

&lt;p&gt;Highlighting these is one of the trickiest jobs of the syntax file. Yet
it&amp;rsquo;s one of the most crucial because if you let e.g. a stray &lt;code&gt;R&amp;lt;&lt;/code&gt; or
&lt;code&gt;[/&lt;/code&gt; go unhighlighted, they will screw up the highlighting of the rest
of the file by starting a string where there isn&amp;rsquo;t one.&lt;/p&gt;

&lt;p&gt;I managed to make great improvements to the highlighting of reduce
(&lt;code&gt;[+]&lt;/code&gt;), hyper (&lt;code&gt;»+«&lt;/code&gt;), post-hyper (&lt;code&gt;@foo».bar&lt;/code&gt;), reverse/cross/sequence/zip
(&lt;code&gt;Rdiv&lt;/code&gt;, &lt;code&gt;R&amp;lt;&lt;/code&gt;, etc), and set operators (&lt;code&gt;(&amp;lt;)&lt;/code&gt;, &lt;code&gt;(&amp;gt;=)&lt;/code&gt;). All the spec tests
for metaoperators I have looked at are now highlighted without issues.&lt;/p&gt;

&lt;h3 id=&#34;strings-and-patterns&#34;&gt;Strings and patterns&lt;/h3&gt;

&lt;p&gt;Another part of the language that presents a challenge is &lt;code&gt;/foo/&lt;/code&gt;,
&lt;code&gt;&amp;lt;bar&amp;gt;&lt;/code&gt;, &lt;code&gt;&amp;lt;&amp;lt;baz&amp;gt;&amp;gt;&lt;/code&gt;, and &lt;code&gt;«quux»&lt;/code&gt;. Determining when these are not actually
numeric division, less-than, or a hyperoperators is tricky. These things
are now matched much more accurately. I also added support for the &lt;code&gt;qqx&lt;/code&gt;
and &lt;code&gt;qqw&lt;/code&gt; operators.&lt;/p&gt;

&lt;h3 id=&#34;grammars&#34;&gt;Grammars&lt;/h3&gt;

&lt;p&gt;Grammars are a whole other language in their own right, and this is where
there is still the most room for improvement (of both performance and
accuracy) in the syntax file. I still don&amp;rsquo;t know grammars well enough,
but I&amp;rsquo;ve fixed all the highlighting issues I&amp;rsquo;ve found. STD.pm6 in its
entirety is now highlighted properly, although Vim can still get confused
occasionally until you scroll a bit or tell it to redraw the screen.&lt;/p&gt;

&lt;h3 id=&#34;pod&#34;&gt;Pod&lt;/h3&gt;

&lt;p&gt;The biggest change here is that I added highlighting of indented Pod
blocks. As part of the indentifier improvements mentioned above, Pod
block names containing hyphens or high-bit alphabetical chars are now
correctly highlighted.&lt;/p&gt;

&lt;h3 id=&#34;folding&#34;&gt;Folding&lt;/h3&gt;

&lt;p&gt;I added rudimentary support for syntax-based folding (disabled by default).&lt;/p&gt;

&lt;h3 id=&#34;miscellaneous&#34;&gt;Miscellaneous&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;I improved highlighting of numbers and version literals&lt;/li&gt;
&lt;li&gt;Fixed a few issues where interpolated things weren&amp;rsquo;t highlighted as such&lt;/li&gt;
&lt;li&gt;Made big improvements to highlighting of transliteration  (&lt;code&gt;tr///&lt;/code&gt;,
&lt;code&gt;tr{}{}&lt;/code&gt;, etc) operators&lt;/li&gt;
&lt;li&gt;Added highlighting of bare/anonymous sigils in more places&lt;/li&gt;
&lt;li&gt;Highlighted the Unicode set operators (&lt;code&gt;∈&lt;/code&gt;, &lt;code&gt;≽&lt;/code&gt;, et al)&lt;/li&gt;
&lt;li&gt;Certain keywords (like &lt;code&gt;die&lt;/code&gt;, &lt;code&gt;state&lt;/code&gt;, etc) are no longer highlighted where
they shouldn&amp;rsquo;t be, e.g. as method calls (&lt;code&gt;$foo.state&lt;/code&gt;)&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;testing&#34;&gt;Testing&lt;/h3&gt;

&lt;p&gt;Of course, I added tests for every improvement and bugfix listed above, so
at least the highlighting should not be getting &lt;em&gt;worse&lt;/em&gt; from now on.&lt;/p&gt;

&lt;h3 id=&#34;end&#34;&gt;__END__&lt;/h3&gt;

&lt;p&gt;All open &lt;a href=&#34;https://github.com/vim-perl/vim-perl&#34;&gt;vim-perl&lt;/a&gt; Github issues
relating to Perl 6 highlighting bugs have been resolved. If you discover
any more problems, please open new issues.&lt;/p&gt;

&lt;p&gt;I tried patching &lt;a href=&#34;https://github.com/perl6/doc&#34;&gt;perl6/doc&lt;/a&gt; to add an option
to use Text::VimColor to highlight code blocks in the documentation. While
it does result in richer and more accurate highlighting than the default
pygments-based highlighter, it is painfully slow to generate. This is because
Text::VimColor (and &lt;a href=&#34;http://ftp.vim.org/vim/runtime/syntax/2html.vim&#34;&gt;&lt;code&gt;2html.vim&lt;/code&gt;&lt;/a&gt;,
on which it is based) extracts Vim&amp;rsquo;s highlighting by calling the
&lt;a href=&#34;http://vimhelp.appspot.com/eval.txt.html#synID%28%29&#34;&gt;&lt;code&gt;synID()&lt;/code&gt;&lt;/a&gt; function
at every character position in the file, which is very slow. So while it may
only take Vim a few dozen milliseconds to highlight an entire file,
extracting the highlighting state into something usable by an external
tool takes several &lt;em&gt;seconds&lt;/em&gt;. I wonder how difficult it would be to patch Vim
(or NeoVim) to export an entire file&amp;rsquo;s highlighting in a more efficient
manner&amp;hellip;&lt;/p&gt;

&lt;p&gt;To close, here is a sample of some meaningless code that used to get
&lt;code&gt;perl6.vim&lt;/code&gt; confused but just looks nice now:&lt;/p&gt;

&lt;p&gt;&lt;link rel=&#34;stylesheet&#34; type=&#34;text/css&#34; href=&#34;http://blog.nix.is/css/vim_syntax.css&#34;&gt;&lt;/p&gt;

&lt;div class=&#34;vimcolor&#34;&gt;&lt;pre&gt;&lt;span class=&#34;synKeyword&#34;&gt;class&lt;/span&gt; Johnny&#39;s::Super-Cool::Module&lt;span class=&#34;synOperator&#34;&gt;;&lt;/span&gt;

&lt;span class=&#34;synSpecial&#34;&gt;my&lt;/span&gt; &lt;span class=&#34;synIdentifier&#34;&gt;$cööl-páttérn&lt;/span&gt; &lt;span class=&#34;synComment&#34;&gt;#`[why hello there]&lt;/span&gt; &lt;span class=&#34;synOperator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;synDelimiter&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;synString&#34;&gt;foo&lt;/span&gt;&lt;span class=&#34;synSpecialChar&#34;&gt;+&lt;/span&gt;&lt;span class=&#34;synDelimiter&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;synOperator&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;synKeyword&#34;&gt;sub&lt;/span&gt; infix&lt;span class=&#34;synOperator&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;synDelimiter&#34;&gt;«&lt;/span&gt;&lt;span class=&#34;synString&#34;&gt;foo&lt;/span&gt;&lt;span class=&#34;synDelimiter&#34;&gt;»&lt;/span&gt; { }

&lt;span class=&#34;synKeyword&#34;&gt;sub&lt;/span&gt; foo-bar (&lt;span class=&#34;synType&#34;&gt;Int&lt;/span&gt; &lt;span class=&#34;synIdentifier&#34;&gt;$a&lt;/span&gt; &lt;span class=&#34;synPreCondit&#34;&gt;where&lt;/span&gt; &lt;span class=&#34;synOperator&#34;&gt;*&lt;/span&gt; &lt;span class=&#34;synOperator&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;synNumber&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;synOperator&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;synIdentifier&#34;&gt;@bar&lt;/span&gt;&lt;span class=&#34;synOperator&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;synType&#34;&gt;Str&lt;/span&gt; &lt;span class=&#34;synIdentifier&#34;&gt;$b&lt;/span&gt; &lt;span class=&#34;synOperator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;synDelimiter&#34;&gt;&#39;&lt;/span&gt;&lt;span class=&#34;synString&#34;&gt;foo&lt;/span&gt;&lt;span class=&#34;synDelimiter&#34;&gt;&#39;&lt;/span&gt;) {
    &lt;span class=&#34;synSpecial&#34;&gt;my&lt;/span&gt; &lt;span class=&#34;synIdentifier&#34;&gt;$document&lt;/span&gt; &lt;span class=&#34;synOperator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;synDelimiter&#34;&gt;qto/END/&lt;/span&gt;&lt;span class=&#34;synString&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;synString&#34;&gt;        you there&lt;/span&gt;
&lt;span class=&#34;synDelimiter&#34;&gt;    END&lt;/span&gt;

    &lt;span class=&#34;synSpecial&#34;&gt;my&lt;/span&gt; &lt;span class=&#34;synIdentifier&#34;&gt;$document&lt;/span&gt; &lt;span class=&#34;synOperator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;synDelimiter&#34;&gt;qq&lt;/span&gt;&lt;span class=&#34;synOperator&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;synString&#34;&gt;heredoc&lt;/span&gt;&lt;span class=&#34;synDelimiter&#34;&gt;/END/&lt;/span&gt;&lt;span class=&#34;synString&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;synString&#34;&gt;        and &lt;/span&gt;&lt;span class=&#34;synIdentifier&#34;&gt;$b&lt;/span&gt;
&lt;span class=&#34;synDelimiter&#34;&gt;    END&lt;/span&gt;

    &lt;span class=&#34;synSpecial&#34;&gt;my&lt;/span&gt; &lt;span class=&#34;synIdentifier&#34;&gt;$result&lt;/span&gt; &lt;span class=&#34;synOperator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;synDelimiter&#34;&gt;qqx/&lt;/span&gt;&lt;span class=&#34;synString&#34;&gt;ls -l bla&lt;/span&gt;&lt;span class=&#34;synDelimiter&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;synOperator&#34;&gt;;&lt;/span&gt;
    &lt;span class=&#34;synSpecial&#34;&gt;my&lt;/span&gt; &lt;span class=&#34;synIdentifier&#34;&gt;@bla&lt;/span&gt; &lt;span class=&#34;synOperator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;synOperator&#34;&gt;[+]&lt;/span&gt; &lt;span class=&#34;synIdentifier&#34;&gt;@bar&lt;/span&gt;&lt;span class=&#34;synOperator&#34;&gt;;&lt;/span&gt;
    &lt;span class=&#34;synSpecial&#34;&gt;my&lt;/span&gt; &lt;span class=&#34;synIdentifier&#34;&gt;@list&lt;/span&gt; &lt;span class=&#34;synOperator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;synIdentifier&#34;&gt;@bla&lt;/span&gt; &lt;span class=&#34;synOperator&#34;&gt;Z,&lt;/span&gt; &lt;span class=&#34;synIdentifier&#34;&gt;@bar&lt;/span&gt;&lt;span class=&#34;synOperator&#34;&gt;;&lt;/span&gt;
    say &lt;span class=&#34;synDelimiter&#34;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&#34;synString&#34;&gt;yes&lt;/span&gt;&lt;span class=&#34;synDelimiter&#34;&gt;&amp;quot;&lt;/span&gt; &lt;span class=&#34;synConditional&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;synIdentifier&#34;&gt;$set1&lt;/span&gt; &lt;span class=&#34;synOperator&#34;&gt;(&amp;lt;)&lt;/span&gt; &lt;span class=&#34;synIdentifier&#34;&gt;$set2&lt;/span&gt;&lt;span class=&#34;synOperator&#34;&gt;;&lt;/span&gt;

    &lt;span class=&#34;synStatement&#34;&gt;=for&lt;/span&gt; &lt;span class=&#34;synType&#34;&gt;Pro-tip&lt;/span&gt;
&lt;span class=&#34;synComment&#34;&gt;    Pay careful attention to the following code&lt;/span&gt;

    &lt;span class=&#34;synConditional&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;synIdentifier&#34;&gt;$a&lt;/span&gt; &lt;span class=&#34;synOperator&#34;&gt;!&amp;lt;&lt;/span&gt; &lt;span class=&#34;synNumber&#34;&gt;4&lt;/span&gt; {
        &lt;span class=&#34;synIdentifier&#34;&gt;@bar&lt;/span&gt;&lt;span class=&#34;synOperator&#34;&gt;».&lt;/span&gt;bla&lt;span class=&#34;synOperator&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;synDelimiter&#34;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&#34;synString&#34;&gt;this &lt;/span&gt;&lt;span class=&#34;synIdentifier&#34;&gt;&amp;amp;nice-func&lt;/span&gt;()&lt;span class=&#34;synString&#34;&gt; thing&lt;/span&gt;&lt;span class=&#34;synDelimiter&#34;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&#34;synOperator&#34;&gt;;&lt;/span&gt;
    }
    &lt;span class=&#34;synSpecial&#34;&gt;my&lt;/span&gt; &lt;span class=&#34;synIdentifier&#34;&gt;$bin&lt;/span&gt; &lt;span class=&#34;synOperator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;synNumber&#34;&gt;-0&lt;/span&gt;&lt;span class=&#34;synSpecial&#34;&gt;b&lt;/span&gt;&lt;span class=&#34;synNumber&#34;&gt;01010&lt;/span&gt;&lt;span class=&#34;synOperator&#34;&gt;;&lt;/span&gt;

    (&lt;span class=&#34;synNumber&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;synOperator&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;synNumber&#34;&gt;2&lt;/span&gt;)[&lt;span class=&#34;synOperator&#34;&gt;*/&lt;/span&gt;&lt;span class=&#34;synNumber&#34;&gt;2&lt;/span&gt;]&lt;span class=&#34;synOperator&#34;&gt;;&lt;/span&gt;
    say &lt;span class=&#34;synIdentifier&#34;&gt;$@foo&lt;/span&gt;&lt;span class=&#34;synOperator&#34;&gt;.&lt;/span&gt;perl&lt;span class=&#34;synOperator&#34;&gt;;&lt;/span&gt;
    &lt;span class=&#34;synDelimiter&#34;&gt;m&lt;/span&gt;&lt;span class=&#34;synOperator&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;synString&#34;&gt;s&lt;/span&gt;&lt;span class=&#34;synDelimiter&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;synString&#34;&gt;foo&lt;/span&gt;&lt;span class=&#34;synDelimiter&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;synIdentifier&#34;&gt;$bar&lt;/span&gt;&lt;span class=&#34;synOperator&#34;&gt;/;&lt;/span&gt;
}

&lt;span class=&#34;synKeyword&#34;&gt;sub&lt;/span&gt; foo (&lt;span class=&#34;synType&#34;&gt;Int&lt;/span&gt;&lt;span class=&#34;synOperator&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;synString&#34;&gt;D&lt;/span&gt; &lt;span class=&#34;synIdentifier&#34;&gt;$bla&lt;/span&gt;) &lt;span class=&#34;synPreCondit&#34;&gt;is&lt;/span&gt; &lt;span class=&#34;synTag&#34;&gt;cached&lt;/span&gt; { }
&lt;/pre&gt;
&lt;/div&gt;</description>
    </item>
    
    <item>
      <title>Testing vim syntax files</title>
      <link>http://blog.nix.is/testing-vim-syntax-files</link>
      <pubDate>Tue, 01 Sep 2009 13:13:00 +0000</pubDate>
      
      <guid>http://blog.nix.is/testing-vim-syntax-files</guid>
      <description>&lt;p&gt;Yesterday, Andy Lester opened an &lt;a href=&#34;http://github.com/petdance/vim-perl/issues#issue/15&#34;&gt;issue&lt;/a&gt;
for vim-perl on github about adding an automated test suite. I&amp;rsquo;ve thought
about doing something like this before, so last night got busy with
prototyping a test harness.
&lt;/p&gt;

&lt;p&gt;What I&amp;rsquo;ve got so far (in &lt;a href=&#34;https://github.com/hinrik/vim-perl/tree&#34;&gt;my fork&lt;/a&gt;)
is a test file that uses Text::VimColor to generate HTML and compare it
against a reference HTML document to determine if the syntax file is doing its
job. If a reference file can&amp;rsquo;t be found, it will create it and skip that
test. Here&amp;rsquo;s what it looks like:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ make test
prove -rv t
t/01_highlighting.t .. 
ok 1 - Correct output for t_source/perl/basic.t
ok 2 # skip Created t_source/perl/advanced.t.html
ok 3 - Correct output for t_source/perl6/basic.t
1..3
ok
All tests successful.
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;In case of failure, it will use Test::Differences to show you what&amp;rsquo;s wrong,
and write the incorrect output to disk for you to inspect:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ vim syntax/perl6.vim # make a bad change
$ make test
prove -rv t
t/01_highlighting.t .. 
ok 1 - Correct output for t_source/perl/basic.t
ok 2 - Correct output for t_source/perl/advanced.t
not ok 3 - Correct output for t_source/perl6/basic.t

#   Failed test &#39;Correct output for t_source/perl6/basic.t&#39;
#   at t/01_highlighting.t line 77.
#
«output from Test::Differences showing the offending lines»
# You can inspect the incorrect output at t_source/perl6/basic.t_fail.html
1..3
# Looks like you failed 1 test of 3.
Dubious, test returned 1 (wstat 256, 0x100)
Failed 1/3 subtests
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The only big downside to this is that &lt;code&gt;01_highlighting.t&lt;/code&gt; tests all the source
files in one go. You currently can&amp;rsquo;t tell it to only test one specific file.&lt;/p&gt;</description>
    </item>
    
  </channel>
</rss>